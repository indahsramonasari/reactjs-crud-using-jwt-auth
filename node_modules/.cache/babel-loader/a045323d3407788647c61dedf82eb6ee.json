{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var checksumStr = str.replace(/[A-Z]/g, function (character) {\n    return parseInt(character, 36);\n  });\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble = true;\n\n  for (var i = checksumStr.length - 2; i >= 0; i--) {\n    digit = checksumStr.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/indahsramonasari/Documents/WIDYA/reactjs-crud-using-jwt-auth/node_modules/validator/lib/isISIN.js"],"names":["Object","defineProperty","exports","value","default","isISIN","_assertString","_interopRequireDefault","require","obj","__esModule","isin","str","test","checksumStr","replace","character","parseInt","sum","digit","tmpNum","shouldDouble","i","length","substring","substr","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA1C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,IAAI,GAAG,4BAAX;;AAEA,SAASN,MAAT,CAAgBO,GAAhB,EAAqB;AACnB,GAAC,GAAGN,aAAa,CAACF,OAAlB,EAA2BQ,GAA3B;;AAEA,MAAI,CAACD,IAAI,CAACE,IAAL,CAAUD,GAAV,CAAL,EAAqB;AACnB,WAAO,KAAP;AACD;;AAED,MAAIE,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAY,QAAZ,EAAsB,UAAUC,SAAV,EAAqB;AAC3D,WAAOC,QAAQ,CAACD,SAAD,EAAY,EAAZ,CAAf;AACD,GAFiB,CAAlB;AAGA,MAAIE,GAAG,GAAG,CAAV;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,YAAY,GAAG,IAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAGR,WAAW,CAACS,MAAZ,GAAqB,CAAlC,EAAqCD,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChDH,IAAAA,KAAK,GAAGL,WAAW,CAACU,SAAZ,CAAsBF,CAAtB,EAAyBA,CAAC,GAAG,CAA7B,CAAR;AACAF,IAAAA,MAAM,GAAGH,QAAQ,CAACE,KAAD,EAAQ,EAAR,CAAjB;;AAEA,QAAIE,YAAJ,EAAkB;AAChBD,MAAAA,MAAM,IAAI,CAAV;;AAEA,UAAIA,MAAM,IAAI,EAAd,EAAkB;AAChBF,QAAAA,GAAG,IAAIE,MAAM,GAAG,CAAhB;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,IAAIE,MAAP;AACD;AACF,KARD,MAQO;AACLF,MAAAA,GAAG,IAAIE,MAAP;AACD;;AAEDC,IAAAA,YAAY,GAAG,CAACA,YAAhB;AACD;;AAED,SAAOJ,QAAQ,CAACL,GAAG,CAACa,MAAJ,CAAWb,GAAG,CAACW,MAAJ,GAAa,CAAxB,CAAD,EAA6B,EAA7B,CAAR,KAA6C,CAAC,QAAQL,GAAT,IAAgB,EAApE;AACD;;AAEDQ,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB;AACAsB,MAAM,CAACxB,OAAP,CAAeE,OAAf,GAAyBF,OAAO,CAACE,OAAjC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var checksumStr = str.replace(/[A-Z]/g, function (character) {\n    return parseInt(character, 36);\n  });\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble = true;\n\n  for (var i = checksumStr.length - 2; i >= 0; i--) {\n    digit = checksumStr.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}