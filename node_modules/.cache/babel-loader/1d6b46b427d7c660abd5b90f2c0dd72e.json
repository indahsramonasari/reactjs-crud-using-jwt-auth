{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\n\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\n\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var trim_quotes = display_name.match(/^\"(.+)\"$/i);\n  var display_name_without_quotes = trim_quotes ? trim_quotes[1] : display_name; // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (!trim_quotes) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name;\n\n      var _display_email = _slicedToArray(display_email, 3);\n\n      display_name = _display_email[1];\n      str = _display_email[2]; // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace('.', ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i2 = 0; _i2 < user_parts.length; _i2++) {\n    if (!pattern.test(user_parts[_i2])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/indahsramonasari/Documents/LEARN/react-jwt-auth/node_modules/validator/lib/isEmail.js"],"names":["Object","defineProperty","exports","value","default","isEmail","_assertString","_interopRequireDefault","require","_merge","_isByteLength","_isFQDN","_isIP","obj","__esModule","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","length","err","Array","isArray","default_email_options","allow_display_name","require_display_name","allow_utf8_local_part","require_tld","splitNameAddress","emailUserPart","gmailUserPart","quotedEmailUser","emailUserUtf8Part","quotedEmailUserUtf8","defaultMaxEmailLength","validateDisplayName","display_name","trim_quotes","match","display_name_without_quotes","trim","contains_illegal","test","all_start_with_back_slash","split","str","options","display_email","_display_email","endsWith","substr","ignore_max_length","parts","domain","pop","user","join","lower_domain","toLowerCase","domain_specific_validation","username","replace","min","max","_user_parts","allow_ip_domain","startsWith","noBracketdomain","slice","pattern","user_parts","_i2","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\n\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\n\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var trim_quotes = display_name.match(/^\"(.+)\"$/i);\n  var display_name_without_quotes = trim_quotes ? trim_quotes[1] : display_name; // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (!trim_quotes) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name;\n\n      var _display_email = _slicedToArray(display_email, 3);\n\n      display_name = _display_email[1];\n      str = _display_email[2];\n\n      // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace('.', ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i2 = 0; _i2 < user_parts.length; _i2++) {\n    if (!pattern.test(user_parts[_i2])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}