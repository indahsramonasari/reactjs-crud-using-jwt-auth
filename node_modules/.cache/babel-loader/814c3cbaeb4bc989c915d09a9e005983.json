{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\\\\\".concat(options.symbol.replace(/\\./g, '\\\\.'), \")\").concat(options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n      decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/indahsramonasari/Documents/WIDYA/reactjs-crud-using-jwt-auth/node_modules/validator/lib/isCurrency.js"],"names":["Object","defineProperty","exports","value","default","isCurrency","_merge","_interopRequireDefault","require","_assertString","obj","__esModule","currencyRegex","options","decimal_digits","concat","digits_after_decimal","forEach","digit","index","symbol","replace","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","join","decimal_amount","decimal_separator","require_decimal","pattern","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","RegExp","default_currency_options","str","test","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\\\\\".concat(options.symbol.replace(/\\./g, '\\\\.'), \")\").concat(options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n      decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}